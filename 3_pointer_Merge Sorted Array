'''
You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.
'''
#Solution: Use 3 pointers
'''
The simplest implementation:
    Initialize nums1Copy to be a new array containing the first m values of nums1.
    Initialize read pointer p1 to the beginning of nums1Copy.
    Initialize read pointer p2 to the beginning of nums2.
    Initialize write pointer p to the beginning of nums1.
    While p is still within nums1:
        If nums1Copy[p1] exists and is less than or equal to nums2[p2]:
            Write nums1Copy[p1] into nums1[p], and increment p1 by 1.
        Else
            Write nums2[p2] into nums1[p], and increment p2 by 1.
        Increment p by 1.
        O(m+n)
'''
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
    #p1: points to nums1_copy[0], p2: points to nums2[0], p3: points to nums1[0]
    #Read from nums1copy and nums2 and put into nums1
        nums1_copy = nums1[:m] #hard copy
        p1 =0
        p2=0
        p3=0
 
        for i in range (m+n):
            #p3 = i+2
            if p1<m and p2< n:
                if nums1_copy[p1] <= nums2[p2]:
                    nums1[p3] = nums1_copy[p1]
                    p1 += 1
                else:
                    nums1[p3] = nums2[p2]
                    p2 += 1
         
            elif p1<m:
                nums1[p3] = nums1_copy[p1]
                p1 += 1
            
            elif p2<n:
                nums1[p3] = nums2[p2]
                p2 += 1
            p3+=1
